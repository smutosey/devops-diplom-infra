name: Netology Infra Deploy
run-name: Infra Apply by ${{ github.actor }} ðŸš€
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true
defaults:
  run:
    working-directory: ./production
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_cloud_id: ${{ secrets.CLOUD_ID }}
  TF_VAR_folder_id: ${{ secrets.FOLDER_ID }}
  TF_VAR_ssh_public_key_b64: ${{ secrets.SSH_PUBLIC_KEY_BASE64 }}
  TF_VAR_ssh_private_key_b64: ${{ secrets.SSH_PRIVATE_KEY_BASE64 }}
  TF_VAR_sa_key_b64: ${{ secrets.TERRAFORM_SA_KEY_BASE64 }}
jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      lb_addr: ${{ steps.tf-get.outputs.lb_addr }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Terraform Install
        id: tf-install
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Plan
        id: tf-plan
        run: |
          terraform init && terraform plan -out=plan.out
      - name: Terraform Apply
        id: tf-apply
        run: |
          terraform apply --auto-approve plan.out
      - name: Terraform get lb address
        id: tf-get
        run: |
          echo "lb_addr=$(terraform show -json | jq '.values.root_module.resources[] | select(.address=="yandex_vpc_address.lb_addr") | .values.external_ipv4_address[0] | .address')" >> "$GITHUB_OUTPUT"
      - name: Check
        run: |
          pwd && ls .
      - name: Upload inventory
        uses: actions/upload-artifact@v4
        with:
          name: inventory
          path: ./ansible/inventory.yml
  kubespray:
    runs-on: ubuntu-latest
    needs: terraform
    container:
      image: quay.io/kubespray/kubespray:v2.25.0
      env:
        ANSIBLE_HOST_KEY_CHECKING: 0
        ANSIBLE_FORCE_COLOR: 1
        LB_ADDRESS: ${{ needs.terraform.outputs.lb_addr }}
#       volumes:
#         - $(pwd)/ansible/:/kubespray/inventory/production/
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 --decode > ~/.ssh/id_rsa
      - name: Download inventory
        uses: actions/download-artifact@v4
        with:
          name: inventory
          path: /kubespray/inventory/production/inventory.yml
      - name: Start Kubespray Install
        run: |
          pwd && ls .
          cp /infra/production/ansible /kubespray/inventory/production/
          ansible-playbook cluster.yml -i /kubespray/inventory/production/inventory.yml --become --become-user=root -e '{\"supplementary_addresses_in_ssl_keys\":[$LB_ADDRESS]}'
          sed -i -e 's# https://.*# https://$LB_ADDRESS:6443#' /kubespray/inventory/production/artifacts/admin.conf




# scp $USERNAME@$IP_CONTROLLER_0:/etc/kubernetes/admin.conf kubespray-do.conf
# ssh -F ssh-bastion.conf centos@$CONTROLLER_IP "sudo chmod 644 /etc/kubernetes/admin.conf"
# scp -F ssh-bastion.conf centos@$CONTROLLER_IP:/etc/kubernetes/admin.conf ~/.kube/config
# sed -i "s^server:.*^server: https://$LB_HOST:6443^" ~/.kube/config

#       - uses: azure/setup-helm@v4.2.0
#         id: install
#       - uses: licenseware/helm@v1
#         with:
#           kubeconfig: ${{ secrets.KUBECONFIG_FILE }} # JSON/YAML encoded string
#           kubeconfig-filepath: /tmp/kubeconfig # mutually exclusive with `kubeconfig`
#           action: upgrade -i # upgrade -i, install, uninstall, etc.
#           atomic: "1"
#           build-dependencies: "0" # helm dep build
#           chart-dir: ./helm
#           chmod-kubeconfig: "1" # `chmod 600 kubeconfig-filepath`
#           cleanup: "1" # delete all the files i.e. kubeconfig & values
#           cleanup-on-fail: "1" # delete newly created resources on failure
#           create-namespace: "0"
#           helm-version: "v3.10.1" # https://github.com/helm/helm/releases
#           namespace: default
#           release-name: ${{ github.event.repository.name }}
#           reuse-values: "0" # possible values: [0, 1] default: 0
#           timeout: 10m
#           update-dependencies: "1" # helm dep update
#           values: image.tag=${{ github.sha }} # comma separated key=value pairs
#           values-string: key1=value1,key2=value2 # comma separated key=value pairs
#           values-file: ${{ secrets.HELM_VALUES }} # JSON/YAML encoded string
#           values-filepath: /tmp/values.yml
#           wait: "1"
